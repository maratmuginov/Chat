"use strict";

var connection = new signalR.HubConnectionBuilder().withUrl("/Chat").build();

document.getElementById("btnSend").disabled = true;

connection.on("receiveMessage", displayMessage);

connection.start()
    .then(() => document.getElementById("btnSend").disabled = false)
    .catch(error => console.error(error.message.toString()));

function sendMessageToHub(message)
{
    connection.invoke("sendMessage", message)
        .catch(error => console.error(error.message.toString()));
}

class Message {
    constructor(username, text, sent) {
        // TODO: Strongly type the Message class members, perhaps port to TypeScript.
        this.userName = username;
        this.text = text;
        this.sent = sent;
    }
}

//userName is in the ViewBag generated by server-side HTML.
const username = userName;
const newMessageTextBox = document.getElementById("newMessageText");
const chat = document.getElementById("chat");
const messagesQueue = [];

function clearInputField() {
    messagesQueue.push(newMessageTextBox.value);
    newMessageTextBox.value = "";
}

function sendMessage() {
    let text = messagesQueue.shift() || "";
    if (text.trim() === "") return;

    let sent = Date.now();
    let message = new Message(username, text, sent);
    sendMessageToHub(message);
}

function displayMessage(message)
{
    let container = document.createElement('div');

    let sender = document.createElement('p');
    sender.innerHTML = message.userName;
    let text = document.createElement('p');
    text.innerHTML = message.text;

    let sent = document.createElement('span');

    // TODO: Add a time string to the .innerHTML of sent.

    container.appendChild(sender);
    container.appendChild(text);
    container.appendChild(sent);
    chat.appendChild(container);
}